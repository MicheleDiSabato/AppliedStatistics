predict(g.tr, s0.new)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
# this gives the estimate of the mean
# (drift component) under gls
predict(g.tr, meuse[1,], BLUE = TRUE)
# prediction over the entire grid
lz.ok <- predict(g.tr, meuse.grid, BLUE = FALSE)
# plot the variance
spplot(lz.ok[,2])
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.fit, set = list(gls=1))
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.fit, set = list(gls=1))
meuse.gstat
v.gls<-variogram(meuse.gstat)
plot(v.gls)
v.gls.fit <- fit.variogram(v.gls, vgm(1, "Sph", 800, 1))
plot(v.gls, v.gls.fit, pch = 19)
# Update gstat object with variogram model
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.gls.fit, set = list(gls=1))
## universal kriging:
## I have to define the covariate in s_0
# slot() extracts the elements in the data.frame (called x and y)
# COMPUTE A NEW POINT :
s0.vec <- as.vector(slot(s0.new,'coords'))
# distance to the river: calculate the distance between s0 and each point of
# the river, then select the minimum
s0.dist <- min(rowSums(scale(meuse.riv,s0.vec)^2)) # s0.vec is the center
s0.new <- as.data.frame(c(s0.new,s0.dist))
names(s0.new) <- c('x','y','dist')
coordinates(s0.new) <- c('x','y')
s0.new <- as(s0.new, 'SpatialPointsDataFrame')
s0.new
# Function "predict" uses the residual variogram stored in the gstat
# object to make the prediction
predict(meuse.gstat, s0.new)
# this gives the estimate of x(s_0)'*beta
# (trend component) under gls
predict(meuse.gstat, s0.new, BLUE = TRUE) # dont use this variance, since it is an uderestimate
# prediction over the entire grid
lz.uk <- predict(meuse.gstat, meuse.grid, BLUE=FALSE)
# estimate of the mean over the entire grid
lz.uk.BLUE <- predict(meuse.gstat, meuse.grid, BLUE=TRUE)
spplot(lz.ok[,1], main = 'Ordinary Kriging, gstat')
spplot(lz.uk[,1], main = 'Universal Kriging, gstat')
spplot(lz.uk.BLUE[,1], main = 'Universal Kriging - drift , gstat')
# Is the drift important to explain the variability of the response variable?
# Let's compare the variogram of the data and of the residuals:
plot(v$dist,v$gamma,xlab='distance',ylab='semivariance',pch=19,col='skyblue1',ylim=c(0,0.8))
v
plot(v)
# Is the drift important to explain the variability of the response variable?
# Let's compare the variogram of the data and of the residuals:
plot(v$dist,v$gamma,xlab='distance',ylab='semivariance',pch=19,col='skyblue1',ylim=c(0,0.8))
plot(v)
# Is the drift important to explain the variability of the response variable?
# Let's compare the variogram of the data and of the residuals:
plot(v$dist,v$gamma,xlab='distance',ylab='semivariance',pch=19,col='skyblue1',ylim=c(0,0.8))
plot(v)
curve(v.f.est(x, C0=v.fit[2,2]+v.fit[1,2], cov.pars=rbind(c(v.fit[2,2], v.fit[2,3]),c(v.fit[1,2], v.fit[1,3])), cov.model = c("spherical","pure.nugget")), from = 0.0001, to = 1600,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='skyblue1',lwd=2, ylim=c(0,110))
# Is the drift important to explain the variability of the response variable?
# Let's compare the variogram of the data and of the residuals:
plot(v$dist,v$gamma,xlab='distance',ylab='semivariance',pch=19,col='skyblue1',ylim=c(0,0.8))
curve(v.f.est(x, C0=v.fit[2,2]+v.fit[1,2], cov.pars=rbind(c(v.fit[2,2], v.fit[2,3]),c(v.fit[1,2], v.fit[1,3])), cov.model = c("spherical","pure.nugget")), from = 0.0001, to = 1600,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='skyblue1',lwd=2, ylim=c(0,110))
points(v.gls$dist,v.gls$gamma,xlab='distance',ylab='semivariance',pch=19,col='steelblue',ylim=c(0,0.8))
curve(v.f.est(x, C0=v.gls.fit[2,2]+v.gls.fit[1,2],
cov.pars=rbind(c(v.gls.fit[2,2], v.gls.fit[2,3]),c(v.gls.fit[1,2], v.gls.fit[1,3])), cov.model = c("spherical","pure.nugget")), from = 0.0001, to = 1600,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='steelblue',lwd=2, ylim=c(0,110))
head(hotels)
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = iflese(hotels$winter=="yes",1,0)
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = ifelse(hotels$winter=="yes",1,0)
dummy
temp = data.frame(x=hotels$x, y=hotels$y, distance=hotels$distance, price=hotels$price,dummy=dummy)
head(temp)
hotels=dummy
head(hotels)
hotels=temp
hotels=temp
head(hotels)
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = ifelse(hotels$winter=="yes",1,0)
temp = data.frame(x=hotels$x, y=hotels$y, distance=hotels$distance, price=hotels$price,dummy=dummy)
hotels=temp
coordinates(hotels) <- c('x','y')
head(hotels)
v=variogram(price ~ dummy + distance + dummy:distance, data=hotels)
plot(v,pch=19)
v=variogram(price ~ dummy + distance + dummy*distance, data=hotels)
plot(v,pch=19)
v=variogram(price ~ dummy + distance + dummy*distance, data=hotels)
plot(v,pch=19)
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = ifelse(hotels$winter=="yes",1,0)
temp = data.frame(x=hotels$x, y=hotels$y, distance=hotels$distance, price=hotels$price,dummy=dummy)
hotels=temp
coordinates(hotels) <- c('x','y')
head(hotels)
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
# a) Assuming a1,g = 0 for g = 1, 2 and a0,1 = a0,2 = a0, estimate the parameter a0 of the model via generalized least squares. Report the point estimate of a0 and the model estimated for Î´(si);
# discuss the model assumptions.
graphics.off()
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = ifelse(hotels$winter=="yes",1,0)
temp = data.frame(x=hotels$x, y=hotels$y, distance=hotels$distance, price=hotels$price,dummy=dummy)
hotels=temp
coordinates(hotels) <- c('x','y')
head(hotels)
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
help(vgm)
v.fit <- fit.variogram(v, vgm(5000, "Sph", 1000))
plot(v, v.fit, pch = 3)
v.fit
v.fit <- fit.variogram(v, vgm(5000, "Sph", 1000))
plot(v, v.fit, pch = 19)
v.fit <- fit.variogram(v, vgm(5000, "Gau", 1000))
plot(v, v.fit, pch = 19)
v.fit
v.fit <- fit.variogram(v, vgm(5000, "Exp", 1000))
vgm()
v.fit <- fit.variogram(v, vgm(5000, "Sph", 1000))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
?predict.gstat
###--------------------###
###    GEOSTATISTICS   ###
###--------------------###
## Clear the workspace
rm(list=ls())
## Load spatial packages
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
## Set working directory
setwd("C:/Users/Michele/Desktop/POLIMI - MAGISTRALE/APPLIED STATISTCS/Geostat")
## Functions for graphics
v.f <- function(x, ...){100-cov.spatial(x, ...)}
v.f.est<-function(x,C0, ...){C0-cov.spatial(x, ...)}
#############################################################
##############                                 ##############
######   EXPLORATORY ANALYSIS & VARIOGRAM ESTIMATION  #######
##############                                 ##############
#############################################################
## Load meuse data set:
## The meuse is a classical geostatistical data set used frequently
## to demonstrate various geostatistical analysis steps.
## The point data set consists of 155 samples of top soil heavy metal
## concentrations (ppm), along with a number of soil and landscape variables.
## The samples were collected in a flood plain of the river Meuse,
## near the village Stein (The Netherlands).
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
dev.off()
# river meuse
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
dev.off()
## Exploratory Analysis ##
##----------------------##
# histogram of zinc variable
hist(meuse$zinc, breaks=16, col="grey", main='Histogram of Zn', prob = TRUE, xlab = 'Zn')
# highly skewed, transform to the log
hist(log(meuse$zinc), breaks=16, col="grey", main='Histogram of log(Zn)', prob = TRUE, xlab = 'log(Zn)')
# scatterplot of log(zinc) with respect to distance from the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
plot(sqrt(meuse$dist), log(meuse$zinc),col='blue')
# Negative correlation: lower distance from the river => higher level of zinc
dev.off()
## Estimating Spatial Correlation ##
##     Variogram Analysis         ##
##--------------------------------##
# sample variogram (binned estimator)
svgm <- variogram(log(zinc) ~ 1, meuse) # 2nd order stat and isotropy
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
# N.B.  the notation "~ 1" stands for a single constant predictor
#       (hp: spatially constant mean)
# default decisions:
# direction dependence, cutoff, lag width
# the following
plot(variogram(log(zinc) ~ 1,meuse),pch=19) # stationarity and isotropy
# automatically decides to ignore direction: point pairs are merged on the
# basis of distance to compute the empirical variogram
plot(variogram(log(zinc) ~ 1, meuse, alpha = c(0, 45, 90, 135)),pch=19) # anisotropy
# point pairs whose separation vector has a given direction are used in each
# panel (not too many directions otherwise noise will increase)
# Note: zonal anisotropy
# cutoff distance: maximum distance up to which point pairs are considered
#                  (default = bbox diagonal / 3) [Ã¨ il massimo valore di h che viene considerato]
# lag width: width of distance intervals over which point pairs are averaged
#            in bins (default = cutoff distance / 15) [larghezza della banda usata per fare la stima puntuale del variogram]
plot(variogram(log(zinc) ~ 1,meuse),pch=19) # isotropy
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1600, width = 1600/15),pch=19)
# intervals can have different widths: to fix varying widths use the argument
# boudaries
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,200,seq(400,1500,100))),pch=19)
# useful for data sets that have much information on short distance variability
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1000, width = 1000/5),pch=19)
## Variogram modeling
##-------------------
# list of parametric isotropic variogram models
vgm()
# in gstat, valid variogram models are constructed by using one or
# combination of two or more basic variogram models
# first argument of the function 'vgm' is partial sill,
# then the desired model, then range, and finally nugget:
# vgm(sill, model, range, nugget)
# some examples...
vgm(1, "Sph", 300)
vgm(1, "Sph", 300, 0.5)
# one can also add two or more models
v1 <- vgm(1, "Sph", 300, 0.5)
v2 <- vgm(0.8, "Sph", 800, add.to = v1)
v2
# this is only measurement error
vgm(0.5, "Nug", 0)
## weighted least squares fitting a variogram model to the sample variogram
## STEPS:
## 1) choose a suitable model
## 2) choose suitable initial values for partial sill, range & nugget
## 3) fit the model using one of the possible fitting criteria
v <- variogram(log(zinc) ~ 1, meuse)
plot(v,pch=19)
# Linear behavior near the origin, growth not very fast
# Recall: both spherical and exponential model have a linear behavior near the
#         origin but exponential model has a faster growth than the spherical one
# => we fit a spherical model
# try reasonable initial values
fit.variogram(v, vgm(1, "Sph", 800, 1))
# try unreasonable initial values
fit.variogram(v, vgm(1, "Sph", 10, 1))
# due to high non linearity in the minimization problem,
# starting from unreasonable initial values might cause fail to converge
# plot of the final fit
v <- variogram(log(zinc) ~ 1, meuse)
v.fit <- fit.variogram(v, vgm(1, "Sph", 800, 1))
plot(v, v.fit, pch = 19)
# fitting method: non linear regression with minimization of weighted
# sum of squares error. final value of the minimum
attr(v.fit, 'SSErr')
# how can we choose weights? argument fit.method in fit.variogram
# fit.method = 1 : w = N_j
# fit.method = 2 : w = N_j/gamma(h_j)^2
# fit.method = 6 : w = 1
# fit.method = 7 : w = N_j/h_j^2
# one can also keep one of the parameters fixed, and fit only the others.
# this is common for the nugget parameter, which may be hard to infer from data
# when sample locations are regularly spread. Information may be derived from
# measurement error characteristics for a specific device.
# ex: fix the nugget variance (psill) to the value 0.06
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE))
# the range parameters can be fixed using argument fit.ranges
## maximum likelihood fitting of variogram models
## - does not need the sample variogram
## - can be performed through restricted maximum likelihood
fit.variogram.reml(log(zinc)~1, meuse, model=vgm(0.6, "Sph", 800, 0.06))
v.fit
# SUMMARY DELLE COSE IMPORTANTI:
# variogram: alpha, cutoff, width
# fit.variogram: fit.sills/fit.range, fit.method
# vgm: anis
# attr(v.fit, 'SSErr')
## modeling anisotropy*
v.dir <- variogram(log(zinc)~1,meuse,alpha=(0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45, 0.3))
print(plot(v.dir, v.anis, pch=19))
#############################################################
##############                                 ##############
######          SPATIAL PREDICTION & KRIGING          #######
##############                                 ##############
#############################################################
## Stationary Univariate Spatial Prediction (Ordinary Kriging)
##-------------------------------------------------------------
## Prediction in a single new location
s0.new=data.frame(x=179180, y=330100) # UTM coordinates
coordinates(s0.new)=c('x','y')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
plot(s0.new, add = TRUE, col='red', lwd = 2)
title('meuse river geostatistical data')
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
g.tr <- gstat(formula = log(zinc) ~ 1, data = meuse, model = v.fit)
## ordinary kriging
# Make the ordinary kriging prediction with the function:
# predict(obj, grid, BLUE=FALSE)
# this gives the prediction of Y(s_0):
predict(g.tr, s0.new)
# variance > 0 (as expected)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
# this gives the estimate of the mean
# (trend component) under gls
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
# this gives the estimate of the mean
# (drift component) under gls
predict(g.tr, meuse[1,], BLUE = TRUE)
rm(list=ls())
graphics.off()
setwd("C:/Users/Michele/Desktop/POLIMI - MAGISTRALE/APPLIED STATISTCS/OLD_EXAMS/Old exams (in English)/100221")
load("C:/Users/Michele/Desktop/POLIMI - MAGISTRALE/APPLIED STATISTCS/LAB_5/mcshapiro.test.RData")
# shopping <- read.table('shopping.txt', header=TRUE)
# head(shopping)
# pdf(file = "myplot2.pdf", onefile = T)
# plot(rnorm(10),rnorm(10))
# plot(rnorm(10),rnorm(10))
# plot(rnorm(10),rnorm(10))
# dev.off()
#        ~
library(MASS)
library(car)
library(rgl)
library(mvtnorm)
library(glmnet)
library(mvnormtest)
library(rgl)
library(fda)
library(KernSmooth)
library(fdakma)
library(fields)
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
library(e1071)
library(class)
# fourth
# Problem n.4
# The manager of the hotel Boule de Neige in Courmayeur is designing the pricing strategy for the carnival festivities
# 2021. The file hotels.txt collects the prices per night y [e/night] in hotels in Courmayeur and neighboring
# villages, as observed for 55 hotels during 2019. The dataset also reports the UTM coordinates si of the hotels,
# whether the price refers to a day during the winter season or not (winter = yes or winter = no), and the
# distance of the considered hotel from the funicular connecting to the ski slopes, d(si) = ksi â sf k, with sf =
#   (342362.58, 5072518.24). Consider for the price the following model
# y(si) = a0,g + a1,g Â· d(si) + Î´(si),
# with Î´(si) a stationary residual with spherical variogram with nugget, and g = 1, 2 the grouping induced by the
# variable winter (g = 1 for winter = yes, g = 2 otherwise).
# b) Assuming a1,g 6= 0, estimate the parameters a0,g, a1,g of the model via generalized least squares. Report the
# point estimate of a0,g, a1,g and the model estimated for Î´(si); discuss the model assumptions.
# c) Choose the best model between those estimated at points (a) and (b). Comment on your choice.
# d) Suggest to the hotel manager a pricing strategy for a stay of 4 nights at Boule de Neige in the period Feb.
# 17th to Feb. 21st (winter = yes, s0 = (342399.74, 5072272.75)). Motivate your response and detail your
# assumptions
# a) Assuming a1,g = 0 for g = 1, 2 and a0,1 = a0,2 = a0, estimate the parameter a0 of the model via generalized least squares. Report the point estimate of a0 and the model estimated for Î´(si);
# discuss the model assumptions.
graphics.off()
hotels <- read.table('hotels.txt', header=TRUE)
head(hotels)
dummy = ifelse(hotels$winter=="yes",1,0)
temp = data.frame(x=hotels$x, y=hotels$y, distance=hotels$distance, price=hotels$price,dummy=dummy)
hotels=temp
coordinates(hotels) <- c('x','y')
head(hotels)
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
v.fit <- fit.variogram(v, vgm(5000, "Sph", 1000))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[1,], BLUE = FALSE)
predict(g.tr, hotels[2,], BLUE = FALSE)
predict(g.tr, hotels[3,], BLUE = FALSE)
g.tr
hotels[1,]
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
v.fit <- fit.variogram(v, vgm(5000, "Sph", 500))
plot(v, v.fit, pch = 19)
v.fit
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
v.fit <- fit.variogram(v, vgm(5000, "Sph", 500))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
v.fit <- fit.variogram(v, vgm(5000, "Sph", 400))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
v.fit <- fit.variogram(v, vgm(4000, "Sph", 400))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
vb=variogram(price ~ distance, data=hotels)
plot(vb,pch=19)
v.fitb <- fit.variogram(vb, vgm(4000, "Sph", 500))
plot(v, v.fit, pch = 19)
vb=variogram(price ~ distance, data=hotels)
plot(vb,pch=19)
v.fitb <- fit.variogram(vb, vgm(4000, "Sph", 500))
plot(vb, v.fitb, pch = 19)
v.fitb
g.tr <- gstat(formula = price ~ distance, data = hotels, model = v.fitb)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
hotels[1,]
hotels[2,]
hotels[3,]
head(hotels)
hotels[5,]
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
predict(g.tr, hotels[5,], BLUE = TRUE)
hotels[1,]
hotels[2,]
hotels[3,]
hotels[5,]
plot(hotels$price, hotel$distance, pch=19)
plot(hotels$price, hotels$distance, pch=19)
plot(hotels$distance, hotels$price, pch=19)
plot(hotels$distance, hotels$price, pch=19)
plot(hotels$distance, hotels$price, pch=19)
i1 = which(hotels$dummy==1)
i2 = which(hotels$dummy==0)
plot(hotels$distance, hotels$price, pch=19)
points(hotels[i1,]$distance, hotels[i1,]$price, pch=19, col = 'red')
points(hotels[i1,]$distance, hotels[i1,]$price, pch=19, col = 'green')
plot(hotels$distance, hotels$price, pch=19)
i1 = which(hotels$dummy==1)
i2 = which(hotels$dummy==0)
plot(hotels$distance, hotels$price, pch=19)
points(hotels[i1,]$distance, hotels[i1,]$price, pch=19, col = 'red')
points(hotels[i2,]$distance, hotels[i2,]$price, pch=19, col = 'green')
plot(hotels$distance, hotels$price, pch=19)
i1 = which(hotels$dummy==1)
i2 = which(hotels$dummy==0)
plot(hotels$distance, hotels$price, pch=19)
points(hotels[i1,]$distance, hotels[i1,]$price, pch=19, col = 'red')
points(hotels[i2,]$distance, hotels[i2,]$price, pch=19, col = 'green')
v.fit <- fit.variogram(v, vgm(4000, "Sph", 400))
plot(v, v.fit, pch = 19)
v.fit
g.tr <- gstat(formula = price ~ 1, data = hotels, model = v.fit)
predict(g.tr, hotels[1,], BLUE = TRUE)
predict(g.tr, hotels[2,], BLUE = TRUE)
predict(g.tr, hotels[3,], BLUE = TRUE)
v=variogram(price ~ 1, data=hotels)
plot(v,pch=19)
v.fit <- fit.variogram(v, vgm(4000, "Sph", 400))
plot(v, v.fit, pch = 19)
v.fit
vb=variogram(price ~ distance, data=hotels)
plot(vb,pch=19)
v.fitb <- fit.variogram(vb, vgm(4000, "Sph", 500))
plot(vb, v.fitb, pch = 19)
